///////////////////////////////////////////////////////////////////////////////
//  Program Name:	pvi-snz/sys/sys_idle_user_logins.spl //ZUSR.
//  Program Desc:	List of idle user login sessions of x hours or more.
//  Requested By:	Chris Ward
//  Request Date:	02jul14
//===========================================================================//
//  Copyright (C) Company Pty Ltd
//  All Rights Reserved. Unauthorised copying is prohibited
//===========================================================================//
//
//  Modification History
//  Date	Who	Chg#	What
//	02jul14	mb	{0}	List idle users, kill function to be added.
//---------------------------------------------------------------------------//
//
// $ prowho -s | wc -l > pronto_licenses_in_use
// $ prowho -s | grep -v "USER" | ""wc -l > pronto_licenses_in_use //-- exclude header line from count.
//
//	note :	history log files are created 
//				via adding following to AT cron job schedule :
//
//	1. at_add.sh : 
// ---------------------------
//	#!/bin/bash
//	var1="$1"
//	#if [ -z ${var+x} ]; then echo "no parameter passed"; else echo "var is set to '
//	$var'"; fi
//	#var1=saturday
//	read -p "please enter day of week to add AT jobs : " var1
//	at -f call_licenses_used.sh 07:00 $var1
//	at -f call_licenses_used.sh 07:30 $var1
//	...
//	at -f call_licenses_used.sh 18:30 $var1
// ---------------------------
//
// 2. at_prowho_add.sh :
// ---------------------------
//	#!/bin/bash
//	var1="$1"
//	#if [ -z ${var+x} ]; then echo "no parameter passed"; else echo "var is set to '
//	$var'"; fi
//	#var1=saturday
//	read -p "please enter day of week to add AT jobs : " var1
//	at -f call_prowho.sh 07:01 $var1
//	at -f call_prowho.sh 07:31 $var1
//	...
//	at -f call_prowho.sh 18:31 $var1
// ---------------------------
//
//
// 3. call_licenses_used.sh :
// ---------------------------
//	#!/bin/bash
//	/home/mladenb/licenses_used.sh >> /home/mladenb/licenses_log
//
//	4. licenses_used.sh : 
// ---------------------------
//	#!/bin/bash
//	echo "`prowho -s|grep -v "USER"|wc -l` Licenses  `date +"%d.%m.%y %r"`"
//
// 5. call_prowho.sh :
// ---------------------------
//	#!/bin/bash
//	/home/mladenb/prowho_used.sh >> /home/mladenb/prowho_log
//	/home/mladenb/prowhox_used.sh >> /home/mladenb/prowhox_log
//	/home/mladenb/who_used.sh >> /home/mladenb/who_log
//
//	6. prowho_used.sh : 
// ---------------------------
//	#!/bin/bash
//	echo "_X_START_PROWHO_DATE_:`date +"%d.%m.%y %r"`"
//	echo "`prowho`"
//	echo "_X_END_PROWHO_DATE_:`date +"%d.%m.%y %r"`"
//	echo "_=_==========================================="
//
//	7. prowhox_used.sh : 
// ---------------------------
//	#!/bin/bash
//	echo "_X_START_PROWHO_DATE_:`date +"%d.%m.%y %r"`"
//	echo "`prowho -s`"
//	echo "_X_END_PROWHO_DATE_:`date +"%d.%m.%y %r"`"
//	echo "_=_==========================================="
//
//	8. who_used.sh : 
// ---------------------------
//	#!/bin/bash
//	echo "_X_START_PROWHO_DATE_:`date +"%d.%m.%y %r"` == who -u =="
//	echo "`who -u`"
//	echo "_X_END_PROWHO_DATE_:`date +"%d.%m.%y %r"`"
//	echo "_=_=========================================== == who -u =="
//
//---------------------------------------------------------------------------//

version-number "140710.000" //{0}

//object tmp-deb-trans like deb-trans type memory
//<
object comp-2-system-control like system-control

/* //<
*/ //>
//<
//#define ism-ff-sysidle snooze-ism-ff-sysidle
//>
#define ip_len 55
object ism-ff-sysidle
/* //<
	file "/data/common/ism-ff-sysidle"
	type isam
*/ //>
	type memory
record
	ifs-x-string	pic x(160)
	ifs-x-login		pic x(8)
	ifs-x-tty		pic x(12)
	ifs-x-date		pic x(10)
	ifs-x-time		pic x(5)
	ifs-x-idle		pic x(5)
	ifs-b-tag		type boolean
	ifs-x-ip			pic x(ip_len)
	ifs-x-task		pic x(30)
	ifs-x-data-dir	pic x(50)
	ifs-n-stores	type numeric
	ifs-n-ip			type numeric
	ifs-b-ip			type boolean
	ifs-n-serial	type numeric
	ifs-x-date2		pic x(10)
	ifs-x-time2		pic x(5)
/* //<
	ifs-n-tty		type numeric
	ifm-c-code				pic x(20)
	ifm-d-start-date		type date
	ifm-d-end-date			type date
	ifm-n-max-datasets	type numeric //like ws-max-idle-hours
	ifm-n-threshold		type numeric //like ws-amount-threshold
*/ //>
endrecord //object ism-ff-sysidle
key is ifs-x-string
key is ifs-x-tty
key is ifs-x-idle ifs-x-login

#define XEXT_FILE "sys_idle_txt"
#define XEXT_FILE2 "sys_pronto_used_licenses_txt"
#define XEXT_FILE3 "sys_prowho_txt"
#define XEXT_FILE4 "/home/mladenb/prowho_log"
#define XEXT_FILE5 "/home/mladenb/prowhox_log"
#define XEXT_FILE6 "/home/mladenb/who_log"

object ff-ext-sys-idle
	like ism-ff-sysidle
	file XEXT_FILE
	type external

//-- table object for "who -s" history logs :
object ff-ext-sys-idle-hist
	like ism-ff-sysidle
	file XEXT_FILE6
	type external

#define KEY_WHO_1 ifs-x-tty ifs-x-login ifs-x-date ifs-x-time
#define KEY_WHO_2 ifs-x-ip  ifs-x-login ifs-x-date ifs-x-time
object tmp-ff-sysidle-hist like ism-ff-sysidle type memory
key KEY_WHO_1
key KEY_WHO_2

object ff-ext-sys-license
	file XEXT_FILE2
	type external
record
	fes-n-used-licenses type numeric
endrecord //object ism-ff-sysidle

object ff-ext-sys-prowho
	like ism-ff-sysidle
	file XEXT_FILE3
	type external

object tmp-ff-sysidle like ism-ff-sysidle type memory
key is ifs-x-idle ifs-x-login
key is ifs-x-data-dir ifs-x-ip
/*
key is ifs-x-login
*/

//-- table object to accumulate tty sessions per store site :
object tmp-ff-prowho like ism-ff-sysidle type memory
key is ifs-x-login ifs-x-ip
key is ifs-x-tty

//-- table object to accumulate licenses used per store / dataset coy :
object tmp-ff-store like ism-ff-sysidle type memory
key is ifs-x-data-dir
key is ifs-n-stores descending

//-- table object for a datagrid of prowho history log analysis :
object ff-ext-prowho-history
	like ism-ff-sysidle
	file XEXT_FILE4
	type external

#define PRIMARY_HISTORY tmp-ff-history
#define KEY_HISTORY ifs-x-data-dir ifs-x-login ifs-x-date
#define KEY_HISTORY2 ifs-x-data-dir ifs-x-date ifs-x-time ifs-x-login
#define KEY_HISTORY3 ifs-x-ip ifs-x-data-dir ifs-x-date ifs-x-time ifs-x-login
#define KEY_HISTORY4 ifs-x-login ifs-x-date ifs-x-time
#define KEY_HISTORY5 ifs-x-date ifs-x-time ifs-x-login ifs-x-ip ifs-x-data-dir
object PRIMARY_HISTORY like ism-ff-sysidle type memory
key is KEY_HISTORY
key is KEY_HISTORY2
key is KEY_HISTORY3
key is KEY_HISTORY4 //ifs-x-login ifs-x-date ifs-x-time
key is KEY_HISTORY5 //ifs-x-date ifs-x-time ifs-x-login ifs-x-ip ifs-x-data-dir
key is ifs-n-serial
field ws-ifs-n-serial like ifs-n-serial

object tmp-ff-hist-store like ism-ff-sysidle type memory
key is ifs-x-data-dir ifs-x-date ifs-x-time
key is ifs-n-stores ifs-x-data-dir ifs-x-date ifs-x-time descending

object tmp-ff-hist-ip like ism-ff-sysidle type memory
key is KEY_HISTORY3

//-- table object for a datagrid of "prowho -s" history log analysis :
#define PRIMARY_PROWHOX_HISTORY tmp-ff-prowhox
object ff-ext-prowhox
	like ism-ff-sysidle
	file XEXT_FILE5
	type external

object PRIMARY_PROWHOX_HISTORY like ism-ff-sysidle type memory
key is KEY_HISTORY
key is KEY_HISTORY2
key is KEY_HISTORY3
key is KEY_HISTORY4 //ifs-x-login ifs-x-date ifs-x-time
key is KEY_HISTORY5 //ifs-x-date ifs-x-time ifs-x-login ifs-x-ip ifs-x-data-dir

//<
#define ism-ff-mem snooze-ism-ff-mem
//>
/*
object ism-ff-mem
	file "/data/common/ism-ff-mem"
	type isam
record
	ifm-c-code				pic x(20)
	ifm-d-start-date		type date
	ifm-d-end-date			type date
	ifm-n-max-datasets	type numeric //like ws-max-idle-hours
	ifm-n-threshold		type numeric //like ws-amount-threshold
endrecord //object ism-ff-mem
key is ifm-c-code
*/
//<
#define X_KEY "sysidle"
/*
#define X_LOAD_REBUILD \
	open ism-ff-mem \
	on error \
		message "Cannot open ism-ff-mem, will create new instance" \
		open ism-ff-mem create permanent \
	endon \
	get ism-ff-mem \
		on index ifm-c-code \
		key X_KEY \
	on error \
	else \
		set ws-start-date		= ifm-d-start-date \
		set ws-end-date		= ifm-d-end-date \
		set ws-max-idle-hours	= ifm-n-max-datasets \
		set ws-amount-threshold = ifm-n-threshold \
	endon \
//-- end-define X_LOAD_REBUILD
*/
//>
//<
//#define ism-ff-sysidle snooze-ism-ff-sysidle
//>
/* //<
object ism-ff-sysidle
	file "/data/common/ism-sysidle"
	//like tmp-deb-trans type isam
	//key is cso-div cso-territory-code cso-so-order-no unique
	type isam
record
	ism-sys-con like sys-consolidation-division
	accountcode
	//710 o-tr-sort-key
	br-acc-code
	trans-type
	trans-date
	trans-ref
	tr-details
	batch-ref
	tr-amount
	terms-disc-amt
	dr-tr-whse-code
	dr-tr-order-no
	dr-tr-bo-suffix
	dr-tr-job-code
	rep-code1
	dr-tr-territory
	tr-cost
	sundry-charges
	dr-tr-provincial-tax-amount
	tax-e-amt
	non-t-amt
	tax-amt
	dr-tr-sales-tax-claim
	dr-tr-terms-disc
	dr-tr-os-amount
	dr-tr-curr-code
	dr-tr-date-stamp
	dr-tr-time-stamp
	dr-tr-uid
	dr-tr-invoice-status
	dr-tr-invoice-date
	dr-tr-invoice-source
	dr-tr-due-date
	dr-tr-trans-no
	dr-tr-reported-date
	dr-tr-spare-1
	dr-tr-user-only-date1
	dr-tr-user-only-alpha4-1
	dr-tr-user-only-alpha4-2
	dr-tr-user-only-num1
	dr-tr-user-only-num2
	dr-tr-ageing-date
	dr-tr-tax-code
	dr-tr-analysis-code
	//710 dr-tr-document-type
	//710 dr-tr-document-no
	//710 dr-tr-document-suffix
	//710 dr-tr-document-seq
	//710 dr-tr-financial-year
	//710 dr-tr-financial-period
	//710 dr-tr-record-status
endrecord //object ism-ff-sysidle
key is ism-sys-con dr-tr-territory trans-date
*/ //>


field ws-ds-count	type numeric
		ws-confirm	type boolean
//>


field
	ws-start-date		type date
	ws-end-date         type date
	ws-max-idle-hours		type numeric //
	ws-amount-threshold 	type numeric //

/*
mode md-so-enq
	prompt "SO Enq"
	help "Enquire on this order"
*/

procedure main
	get system-control first
//<
	set ws-ds-count = 0
	if get-param(1) != "-buildonly"
		//-- restore last entered criteria :
		//X_LOAD_REBUILD
		//--
		open ism-ff-sysidle
			//truncate permanent
		on error
			//message "Cannot open ism-ff-sysidle, will create new instance"
			open ism-ff-sysidle truncate temporary
			//open ism-ff-sysidle create permanent
		endon //open ism-ff-sysidle
		/*
		set ws-start-date	= date2julian("01.nov.2013")
		set ws-end-date	= date2julian("30.nov.2013")
		set ws-amount-threshold = 6000
		set ws-max-idle-hours = 3 //5 //100 //for testing
		//
		do get-user-input entry-once
		*/
		do get-user-input entry-once
		set ws-confirm = true
	else
		//-- -buildonly call :
		set ws-start-date	= date-to-julian(get-param(2))
		set ws-end-date	= date-to-julian(get-param(3))
		set ws-amount-threshold = num(get-param(4))
		set ws-ds-count	= num(get-param(5))
		set ws-confirm		= true
	endif //get-param(1) != "-buildonly"

	if ws-confirm
/* //<
		do build-dataset
		do display-in-grid
	endif
*/ //>
		open PRIMARY_HISTORY truncate temporary
		open PRIMARY_PROWHOX_HISTORY truncate temporary //tmp-ff-prowhox
		if get-param(1) = "-buildonly"
			do build-dataset
			//-- do display-in-grid
		else
			//X_LOAD_REBUILD //-- restore last entered criteria

			do build-dataset
			do display-in-grid
		endif
	else
		//X_LOAD_REBUILD //-- restore last entered criteria
		do display-in-grid
	endif //ws-confirm
//>
endprocedure // main ----------------------------------------------------------

screen get-user-input
	window @1,1 to @6,50 title "Set Criteria"
	box @1,1 to @5,50 title SPACES
	//
	//-- testing default criteria :
	set ws-start-date	= date2julian("01.nov.2013")
	set ws-end-date	= date2julian("30.nov.2013")
	set ws-amount-threshold = 6000
	set ws-max-idle-hours = 2 //9 hours or over
	//--
	//-- restore last entered criteria :
	//X_LOAD_REBUILD
	//
	/*
	accept ws-start-date    @2,12 title "Start Date"
		default ws-start-date
	accept ws-end-date  	@3,12 title "End Date"
		default ws-end-date
	*/
//<
	accept ws-max-idle-hours	@3,25 pic 9 title "Hours (or over) idle time"
		default ws-max-idle-hours
//>
confirm
	auto
confirmed
/*
	do build-dataset
	do display-in-grid
*/
	set ws-confirm = true
notconfirmed
	set ws-confirm = false
endconfirm
endscreen // get-user-input ---------------------------------------------------

//<
#define DISPLAY_DATASET_COUNT \
	if ifs-x-login = spaces \
		display "Thinking... " @21,56 foreground prompts \
	else \
		display ifs-x-login @21,56 foreground prompts \
	endif \
	display concat("Building idle Logins" ) @21,68 foreground prompts
	//display concat("Building " str(ws-ds-count) "/" str(ws-max-idle-hours) " datasets" ) @21,68 foreground prompts
//end-define DISPLAY_DATASET_COUNT
field ws-rec-count type numeric
#define DISPLAY_IF_MOD_COUNT \
	set ws-rec-count += 1 \
	/* if (100 % ws-rec-count = zero) */ \
		/* display accountcode @21,56 foreground prompts */ \
		DISPLAY_DATASET_COUNT \
	/* endif */ \
//end-define DISPLAY_IF_MOD_COUNT \
//>
#define STR_HRS zstr(ws-max-idle-hours,2,0)
#define PROG_TITLE "idle Login Sessions  "

field ws-licenses	type numeric
field xstr			pic x(400)
field ystr			pic x(400)
field ws-idle-count type numeric
field ws-check-only type boolean
field ws-history-log type boolean

#define STRPAT(ASTR,BPATTERN) pattern(ASTR,BPATTERN)
#define COY_STORE substring(ifs-x-login,1,3)

#define TIME_HR concat(fstr( ws-hr,2,0 ) ":" )
#define TIME_MIN concat(zstr(minute(tod())2,0 ) )
field ws-as-at-time-stamp	type string
		ws-hr						type numeric
procedure build-dataset
	local field	lf-ifs-x-task		like ifs-x-task
					lf-ifs-x-data-dir	like ifs-x-data-dir
	window @19,34 to @23,95
		title is "Building Data"
		//title concat(PROG_TITLE " for over " str(ws-max-idle-hours) " hours" )
		colour white
		no-hide
	display bitmap concat(get-env("BMS") "/images/repedge.gif") @19,34
	display concat(PROG_TITLE) @20,49 background left
	//display concat(sys-consolidation-division ": Finance Sales" ) @20,49 background left
	display "User :" @21,49 background left
	open tmp-ff-sysidle truncate temporary
	//open ism-ff-sysidle
	//-- build time stamp string :
	set ws-hr = hour(tod())
	if ws-hr > 11
		if ws-hr > 12
			set ws-hr -= 12
		endif
		set ws-as-at-time-stamp = concat( TIME_HR TIME_MIN " pm" )
	else
		set ws-as-at-time-stamp = concat( TIME_HR TIME_MIN " am" )
	endif
	if get-param(1) != "-buildonly"
		open ism-ff-sysidle
			//truncate permanent
		on error
			//message "Cannot open ism-ff-sysidle, will create new instance"
			open ism-ff-sysidle create permanent
		endon //open ism-ff-sysidle
	endif //get-param(1) != "-buildonly"
//<
	display accountcode @21,56 foreground prompts
	//set ws-max-idle-hours = num(get-param(6))
	DISPLAY_DATASET_COUNT
//>

//-- build no. of pronto licenses in use here :
// $ prowho -s | wc -l > pronto_licenses_in_use
//#define XEXT_FILE2 "sys_pronto_used_licenses_txt"
	//-- exclude "psd" "pronto" & "root" from this count of licenses used :
	/*
	set xstr = concat('prowho -s | grep -v "root"|grep -v "pronto"|grep -v "psd"| wc -l > ' XEXT_FILE2 )
	*/
	//-- include "psd" "pronto" & "root" in the count of licenses used :
	set xstr = concat('prowho -s | wc -l > ' XEXT_FILE2 )
	command "sh" parameters "-c" xstr

	set ws-licenses = zero
	extract ff-ext-sys-license
		if ws-licenses = zero
			set ws-licenses = fes-n-used-licenses
		endif
	endextract //ff-ext-sys-license
	//-- remove header line from the count :
	set ws-licenses -= 1


//-- build list of idle login sessions here :
//--
//	set xstr = concat("`who -u | awk 'substr($5,length($5)-4,length($5)-3) >   "09"    && $1 != "psd" && $1 != "root" && $1 != "pronto" { print \"pkill -KILL -t \" $2}'` > sys_idle_txt")
//set ws-max-idle-hours = 1 
/*
	set xstr = concat("`who -u | awk 'substr($5,length($5)-4,length($5)-3) > " '"' STR_HRS '"' ' { print "pkill -KILL -t " $2}' "'` | >> " XEXT_FILE)
	set xstr = concat('echo "`who '   "-u | awk '{ print "    '\"pkill -KILL -t \" $2}'    "'` " '"'    " >> " XEXT_FILE)
*/
	//-- create & read in prowho -s result :
	set xstr = concat("prowho > " XEXT_FILE3 )
	command "sh" parameters "-c" xstr
	//open ff-ext-sys-prowho
	//	on error message concat("unable to open file: " XEXT_FILE3) endon
	//--
/*
$ prowho
USER     TTY       TIME          CURRENT-TASK        WORKING-DIRECTORY
root     pts/0     Jul 10 10:01  proadmin            /pro/pronto/lib
root     pts/1     Jul 10 10:04  proman              /pro/data/mas
*/
	//-- table object to accumulate tty sessions per store site :
	open tmp-ff-prowho truncate temporary
	extract ff-ext-sys-prowho all
		if pattern(ifs-x-string, "USER")
			//-- ignore header line of external file...
		else
			set ifs-x-login		= substring(ifs-x-string,1,9)
			set ifs-x-tty			= substring(ifs-x-string,10,19)
			set ifs-x-task			= substring(ifs-x-string,34, 53) //STRPAT(ifs-x-string,"/") - 1)
			set ifs-x-data-dir	= substring(ifs-x-string,54, 54 + 40)
//message "zaz:" ifs-x-string
//message "zaz: tty:" strconcat(ifs-x-tty) " task:" strconcat(ifs-x-task) " dir:" strconcat(ifs-x-data-dir)
			insert tmp-ff-prowho
			//prowho -s : set ifs-x-ip			= substring(ifs-x-string,19, STRPAT(ifs-x-string,"/") - 1)
		endif //pattern(ifs-x-string, "SESSIONS")
	endextract //ff-ext-sys-prowho all

	//--
	//-- do NOT exclude "psd" and "pronto" from this list :
	set xstr = concat("who -u > " XEXT_FILE)
//message concat("zaz a: hrs:" STR_HRS)
//message concat("zaz b:" xstr)
	command "sh" parameters "-c" xstr
//message concat("zaz c: hrs:" STR_HRS)

	//-- load up table from external flat file 
	//open ff-ext-sys-idle
	//	on error message concat("unable to open file: " XEXT_FILE) endon
	set ws-check-only = false
	do extract-ff-idle


	//-- merge tmp-ff-sysidle with "prowho" of tmp-ff-prowho 
	//-- also do total count of sessions idle :
	set ws-idle-count = zero
	extract tmp-ff-sysidle all
		set ws-idle-count += 1
		save tmp-ff-sysidle
		get tmp-ff-prowho
			on index	ifs-x-tty
			key is	ifs-x-tty
		on error
		else
			//-- do merge
			set lf-ifs-x-task			= ifs-x-task
			set lf-ifs-x-data-dir	= ifs-x-data-dir
			restore tmp-ff-sysidle
			set ifs-x-task				= lf-ifs-x-task
			set ifs-x-data-dir		= lf-ifs-x-data-dir
			update tmp-ff-sysidle
		endon //get tmp-ff-prowho
	endextract //tmp-ff-sysidle

	//-- table object to accumulate licenses used per store / dataset coy :
	open tmp-ff-store truncate temporary
	extract tmp-ff-sysidle all
		get tmp-ff-store
			on index	ifs-x-data-dir
			key is	ifs-x-data-dir
		on error
			//-- create new
			set ifs-n-stores = 1
			insert tmp-ff-store
		else
			//-- update
			set ifs-n-stores += 1
			update tmp-ff-store
		endon //get tmp-ff-prowho
	endextract //tmp-ff-sysidle

	//-- table to accumulate HISTORY LOG of licenses used per store / dataset coy :
	open tmp-ff-hist-store truncate temporary
	open tmp-ff-hist-ip truncate temporary
//zzz zaz

/*
	set ws-rec-count = zero
	select * from deb-trans
		where trans-type in {"PD" "JE" "CR"} and
		substring(tr-details 1 3) in {"BC#" "BE#" "CE#" "GE#"} and
		br-acc-code = " " and
		trans-date between ws-start-date and ws-end-date
	detail
		set dr-tr-spare-1 = "O"
		insert tmp-ff-sysidle
		set ism-sys-con = sys-consolidation-division
		insert ism-ff-sysidle
//<
*/
		/*
		display accountcode @21,56 foreground prompts
		DISPLAY_DATASET_COUNT
		*/
		/*
		DISPLAY_IF_MOD_COUNT
		*/
//>
/*
	endselect
*/
/* //< -- no deb-trans-archive table exists in +710
	select * from deb-trans-archive
		where trans-type in {"PD" "JE" "CR"} and
		substring(tr-details 1 3) in {"BC#" "BE#" "CE#" "GE#"} and
		br-acc-code = " " and
		trans-date between ws-start-date and ws-end-date
	detail
		set dr-tr-spare-1 = "A"
		insert tmp-ff-sysidle
		set ism-sys-con = sys-consolidation-division
		insert ism-ff-sysidle
//<
		display accountcode @21,56 foreground prompts
		DISPLAY_DATASET_COUNT
		DISPLAY_IF_MOD_COUNT
//>
	endselect
*/ //>
endprocedure // build-dataset -------------------------------------------------

#define SET_WHO_FIELDS \
	set ifs-b-tag			= false \
	set ifs-x-login		= substring(ifs-x-string,1,8) \
	set ifs-x-tty			= substring(ifs-x-string,10,21) \
	set ifs-x-date			= substring(ifs-x-string,23,32) \
	set ifs-x-time			= substring(ifs-x-string,34,38) \
	set ifs-x-idle			= substring(ifs-x-string,40,44) \
	set ifs-x-ip			= substring(ifs-x-string, STRPAT(ifs-x-string,"(") + 1, STRPAT(ifs-x-string,")") - 1) \
	if pattern(ifs-x-idle,".") \
		set ifs-x-idle = "00:00" \
	endif \
	if pattern(ifs-x-idle," old ") \
		set ifs-x-idle = "99:99" \
	endif \
//end-#define SET_WHO_FIELDS

procedure extract-ff-idle
	local field	lf-ifs-x-date	like ifs-x-date
					lf-ifs-x-time	like ifs-x-time
//--
if ws-history-log
	set lf-ifs-x-date	= ifs-x-date	//save date time stamp from log file
	set lf-ifs-x-time	= ifs-x-time
	//extract ff-ext-sys-idle-hist all
	SET_WHO_FIELDS
	set ifs-x-date2	= ifs-x-date	//save date time stamp from log file
	set ifs-x-time2	= ifs-x-time
	set ifs-x-date	= lf-ifs-x-date	//save date time stamp from log file
	set ifs-x-time	= lf-ifs-x-time
	insert tmp-ff-sysidle-hist
else
	open ff-ext-sys-idle permanent
	extract ff-ext-sys-idle all
		SET_WHO_FIELDS
	/*
		set ifs-b-tag			= false
		set ifs-x-login		= substring(ifs-x-string,1,8)
		set ifs-x-tty			= substring(ifs-x-string,10,21)
		set ifs-x-date			= substring(ifs-x-string,23,32)
		set ifs-x-time			= substring(ifs-x-string,34,38)
		set ifs-x-idle			= substring(ifs-x-string,40,44)
	*/
//if ws-check-only
//message "zaz: check-only: " strconcat(ifs-x-string)
//message "zaz: check-only: tty: " strconcat(ifs-x-tty)
//endif
		/*
		set ifs-x-ip			= substring(ifs-x-string,46 + 13,46 + 13 + ip_len)
		*/
	/*
		set ifs-x-ip			= substring(ifs-x-string, STRPAT(ifs-x-string,"(") + 1, STRPAT(ifs-x-string,")") - 1)
		if pattern(ifs-x-idle,".")
			set ifs-x-idle = "00:00"
		endif
		if pattern(ifs-x-idle," old ")
			set ifs-x-idle = "99:99"
		endif
	*/
//message concat(" >" ifs-x-idle "< ")
		if num(substring(ifs-x-idle,1,2)) > (ws-max-idle-hours - 1)
//message concat("zaz: hrs = " substring(ifs-x-idle,1,2) )
			if ws-check-only
				//-- just do a quick check on tty idle status
			else
				//-- do first time build process :
				insert tmp-ff-sysidle
			endif //ws-check-only
		endif
		if ws-check-only
			//-- just do a quick check on tty idle status
			save tmp-ff-sysidle
		else
			//-- do first time build process :
			DISPLAY_IF_MOD_COUNT
		endif //ws-check-only
	endextract //ff-ext-sys-idle
endif //ws-history-log
endprocedure //extract-ff-idle
//<
object tmp-system-user like system-user type memory // for user/company sort seq -user-user-only-spare-flag2-1 for tag

mode md-history-analysis
	prompt "History by Store"
	help "Historical Logins per Store"
	icon is admin-icon

mode md-stores
	prompt "Stores"
	help "Logins per Store"

mode md-tag
	prompt "Incl/Excl"
	help "Should this tty session be terminated?"

mode md-tag-flip
	prompt "Flip / Invert Tags"
	help "Tag all untagged lines"

mode md-kill
	prompt "Kill Tagged"
	help "Kill tagged lines"
	icon is transaction-icon
	//when ws-tag-count > zero

mode md-logins
	prompt "Logins"
	help "Show Logins for this Store"

mode md-all-logins
	prompt "All Logins"
	help "Show All Logins"

mode md-maintain-datasets-for-inclusion
	prompt "Maintain Dataset List"
	help "Maintain Datasets for inclusion"
	icon is admin-icon
	//icon is admin-folder-icon

mode md-build-all
	prompt "Rebuild"
	help "Rebuild Finance Sales"
	icon is transaction-icon
	//icon is admin-folder-icon
	//when login-id() in {"robd"}

//>

#define ACCEPT_NEVER_ACCEPTED \
	showvalue \
	when false
//end-define ACCEPT_NEVER_ACCEPTED
//	when screenmode() = find
//	and screenmode() <> find

//ACCEPT_READ_ONLY_TITLE_HELP(tfa-terr-desc,1,024,"Terr Description","Territory Description")
#define ACCEPT_READ_ONLY_TITLE_HELP(AFLD,BROW,CCOL,DTITLE,EHELP) \
	accept AFLD  @ BROW, CCOL \
		title DTITLE \
		help EHELP \
		read-only
//end-define ACCEPT_READ_ONLY_TITLE_HELP(AFLD,BROW,CCOL,DTITLE,EHELP)

/*
#define cso-div ism-sys-con
object tmp-sys-con like ism-ff-sysidle type memory
key is cso-div
*/

//DISPLAY_FLD(ifs-x-login,009,"User")
field ws-tag-count type numeric
#define DISPLAY_FLD(AFLD,BCOL,CTITLE) \
	display AFLD @1,BCOL title CTITLE
#define COLOUR_HIGHLIGHT colour is yellow on black
#define COLOUR_HIGHLIGHT_ADMIN colour is blue on yellow //blue on white
/*
#define IS_ADMIN_USER(AUSER) (pattern(AUSER,"^mladenb") or pattern(AUSER,"^cward") or pattern(AUSER,"^leighg") or pattern(AUSER,"^robd") or pattern(AUSER,"^roxanne") or pattern(AUSER,"^psd") or pattern(AUSER,"^pronto") or pattern(AUSER,"^root") )
*/
#define IS_ADMIN_USER(AUSER) \
	AUSER in {"mladenb" "coreyb" "cward" "leighg" "robd" "roxanne" "psd" "pronto" "root"}

#define PRIMARY_TABLE tmp-ff-sysidle

//710 and above only -- not in Pronto 660 :
#define IF_MSG_BOX(ATITLE,BPROMPT) \
	if 1 = 1 //always run -- change this for 710 to below commented out code.
#define ENDIF_MSG_BOX endif
/*
//IF_MSG_BOX("Confirm Kill","Go ahead and Kill these processes?")
#define IF_MSG_BOX(ATITLE,BPROMPT) \
	message-box BPROMPT \
	title ATITLE \
	message-buttons MSG_BOX_YES_NO \
	default MSG_BOX_NO \
	icon MSG_BOX_STOP \
	if message-status = MSG_BOX_YES
#define ENDIF_MSG_BOX endif
*/

field ws-store-filter		like ifs-x-data-dir
field ws-history-count		type boolean
field ws-ifs-x-ip				like ifs-x-ip
field ws-ifs-x-ip-old		like ifs-x-ip
field ws-ifs-n-ip				like ifs-n-ip
field ws-ifs-x-login			like ifs-x-login
field ws-ifs-x-date			like ifs-x-date
field ws-ifs-x-time			like ifs-x-time
field ws-is-duplicate		type boolean

#define STORE_LOG_HIST_FILTER concat(strconcat(ifs-x-data-dir) ", " strconcat(ifs-x-date) ", " strconcat(ifs-x-time) )

//do grid-by-history
//#define PRIMARY_HISTORY tmp-ff-history
//#define KEY_HISTORY ifs-x-data-dir ifs-x-login ifs-x-date
//#define KEY_HISTORY2 ifs-x-data-dir ifs-x-date ifs-x-time ifs-x-login
#define NO_IP_NUM "00."
#define PROWHO_TAG_START "_X_START_PROWHO_"
#define PROWHO_TAG_END "_X_END_PROWHO_"
#define PROWHO_TAG_BREAK "_=_=="
#define PROWHO_TAG_HEADER "USER"
#define PROWHO_TAG_HEAD2 "mladen"
#define STR_PREV_PROWHO_USER concat(strconcat(ifs-x-data-dir) strconcat(ifs-x-login) strconcat(ifs-x-date) strconcat(ifs-x-time) )
//#define STR_PREV_PROWHO_STORE concat(strconcat(ifs-x-data-dir) strconcat(ifs-x-date) strconcat(ifs-x-time) strconcat(ifs-x-login) )

#define LOG_TAG_START \
	if pattern(ifs-x-string, PROWHO_TAG_START) \
		/* set date & time stamp : */ \
		set lf-str-date	= substring(ifs-x-string,23,30) \
		set lf-str-time	= substring(ifs-x-string,32,42) \
	endif //pattern(ifs-x-string, PROWHO_TAG_START)
//end-#define LOG_TAG_START

#define IF_LOG_TAG_HEADER \
	/* //-- ignore header line of external file... */ \
	if pattern(ifs-x-string, PROWHO_TAG_HEADER) \
		or pattern(ifs-x-string, PROWHO_TAG_START) \
		or pattern(ifs-x-string, PROWHO_TAG_END) \
		or pattern(ifs-x-string, PROWHO_TAG_BREAK) \
		or pattern(ifs-x-string, PROWHO_TAG_HEAD2)
//end-#define IF_LOG_TAG_HEADER

//if TO_TIME(lf-n-hrs, lf-n-mins) ... 
#define TO_TIME(AHRS,BMINS) (AHRS * 3600 + BMINS)

//set lf-n-hrs = TO_HOUR(ifs-x-time)
//TO_HOUR(ifs-x-time,lf-n-hrs,lf-n-mins) //-- return hour and mins from time in text field format eg. "06:00"
#define TO_HOUR(ASTR,BHRS,CMINS) \
	set BHRS			= num( substring(ASTR,1,2) ) \
	set CMINS		= num( substring(ASTR,4,5) ) \
	if BHRS > zero and BHRS < 7 /* make it : pm */ \
		set BHRS += 12 \
	endif
//end-#define TO_HOUR(ASTR)

screen grid-by-history
	local field	lf-str-date type string
					lf-str-time type string
					lf-prev-usr type string
					lf-logins-per-store like ifs-n-stores	//type numeric
					lf-z-date	type date //date2julian("01.jan.2014")
					lf-z-time	type time
					lf-a-time	type time
					lf-a-date	type date //date2julian("01.jan.2014")
					lf-n-hrs		type numeric
					lf-n-mins	type numeric
					lf-ifs-x-date		like ifs-x-date
					lf-ifs-x-time		like ifs-x-time
					lf-ifs-x-login		like ifs-x-login
					lf-ifs-x-ip			like ifs-x-ip
					lf-ifs-x-data-dir	like ifs-x-data-dir
					lf-saved		type boolean
	window @1,1 to @19,90
	title concat("PROWHO Log - History by Store" )
	primary tmp-ff-hist-store //tmp-ff-store
		on index	ifs-x-data-dir ifs-x-date ifs-x-time
		//on index	ifs-n-stores ifs-x-data-dir ifs-x-date ifs-x-time descending
/*
	primary PRIMARY_HISTORY
		on index KEY_HISTORY2
*/
	datagrid occurs 15
	allowed md-logins md-all-logins search
	review-from-start
before
//object ff-ext-prowhox
if not file-exists(XEXT_FILE5,0)
	message "prowho Log file not found : " XEXT_FILE5
endif
if not file-exists(XEXT_FILE4,0)
	//-- create & read in history of prowho -s results :
	//open ff-ext-sys-prowho
	//open tmp-ff-prowho truncate temporary
//open ff-ext-prowho-history 
//on error
	//-- log file does not exist.
	//message XEXT_FILE4 " Log file does not exist."
	message "prowho Log file not found."
else
	//-- build table to accumulate LOG HISTORY of licenses used per store / dataset coy :
	//-- HISTORY LOG file-exists(XEXT_FILE4,0)
if ws-history-count
	//-- already built.
else
	//-- build from history logs :
	open tmp-ff-sysidle-hist truncate temporary
	open ff-ext-sys-idle-hist permanent
	extract ff-ext-sys-idle-hist all
	detail
		//--
		//-- set date & time stamp :
		LOG_TAG_START
		/*
			set lf-str-date	= substring(ifs-x-string,23,30)
			set lf-str-time	= substring(ifs-x-string,32,42)
		*/
		IF_LOG_TAG_HEADER
			//-- ignore header line of external file...
		else
			//-- grab who -u "system idle" history log line details :
			set ws-check-only = false
			set ws-history-log = true
			set ifs-x-date			= lf-str-date  //save date time stamp from log file
			set ifs-x-time			= lf-str-time
			do extract-ff-idle //insert tmp-ff-sys-idle-hist
			set ws-history-log = false
		endif //pattern(ifs-x-string, PROWHO_TAG_HEADER) or pattern(ifs-x-string, PROWHO_TAG_START)
		//--
	endextract //ff-ext-sys-idle-hist

//message 'zaz: screen-grid-1 : '
//do screen-grid-1	//SCREEN_GRID()

	set ws-history-count = true
	extract ff-ext-prowho-history all
	detail
	//extract ff-ext-sys-prowho all
		LOG_TAG_START
		/*
		if pattern(ifs-x-string, PROWHO_TAG_START)
			//-- set date & time stamp :
			set lf-str-date	= substring(ifs-x-string,23,30)
			set lf-str-time	= substring(ifs-x-string,32,42)
		endif //pattern(ifs-x-string, PROWHO_TAG_START)
		*/
		IF_LOG_TAG_HEADER
			//-- ignore header line of external file...
		/*
		if pattern(ifs-x-string, PROWHO_TAG_HEADER) 
			or pattern(ifs-x-string, PROWHO_TAG_START)
			or pattern(ifs-x-string, PROWHO_TAG_END)
			or pattern(ifs-x-string, PROWHO_TAG_BREAK)
			or pattern(ifs-x-string, PROWHO_TAG_HEAD2)
			//-- ignore header line of external file...
		*/
		else
			//-- grab prowho history log line details :
			set ifs-x-date			= lf-str-date
			set ifs-x-time			= lf-str-time
			set ifs-x-login		= substring(ifs-x-string,1,9)
			//set ifs-x-tty			= substring(ifs-x-string,10,21)
			set ifs-x-tty			= substring(ifs-x-string,10,19)
			set ifs-x-data-dir	= substring(ifs-x-string,54, 54 + 40)
			//prowho without -s has no ip address result :
			//set ifs-x-ip		= substring(ifs-x-string,21, STRPAT(ifs-x-string,"/") - 1)

			//only insert for dates after the prowho -s HISTORY LOG started :
			if date2julian(ifs-x-date) > date2julian("24.Jul.2014")
				//if time > 11:30am on 21 july 2014 :
				/*
				if date2julian(ifs-x-date) = date2julian("21.Jul.2014")
					if ifs-x-time > "11:30" and ifs-x-time < "07:00"
						//only insert for dates after the prowho -s HISTORY LOG started :
						insert PRIMARY_HISTORY
					endif
				else
				*/
				/*
					set ws-ifs-n-serial += 1
					set ifs-n-serial = ws-ifs-n-serial
				*/
					insert PRIMARY_HISTORY
				//endif
			endif
		endif //pattern(ifs-x-string, PROWHO_TAG_HEADER) or pattern(ifs-x-string, PROWHO_TAG_START)
	endextract //ff-ext-prowho-history


	extract PRIMARY_HISTORY all
	detail
		set ws-ifs-n-serial += 1
		set ifs-n-serial = ws-ifs-n-serial
//message "zaz n-serial = " str(ifs-n-serial)
		update PRIMARY_HISTORY
	endextract //PRIMARY_HISTORY all

	//-- prowho -s :
	//-- --------------
	//-- --------------
	//-- table object for a datagrid of "prowho -s" history log analysis :
	//#define PRIMARY_PROWHOX_HISTORY tmp-ff-prowhox
	//object ff-ext-prowhox
	extract ff-ext-prowhox all
	detail
		if pattern(ifs-x-string, PROWHO_TAG_START)
			//-- set date & time stamp :
			set lf-str-date	= substring(ifs-x-string,23,30)
			set lf-str-time	= substring(ifs-x-string,32,42)
		endif //pattern(ifs-x-string, PROWHO_TAG_START)
		if pattern(ifs-x-string, PROWHO_TAG_HEADER) 
			or pattern(ifs-x-string, PROWHO_TAG_START)
			or pattern(ifs-x-string, PROWHO_TAG_END)
			or pattern(ifs-x-string, PROWHO_TAG_BREAK)
			or pattern(ifs-x-string, PROWHO_TAG_HEAD2)
			//-- ignore header line of external file...
		else
			//-- grab prowho history log line details :
			set ifs-x-date			= lf-str-date
			set ifs-x-time			= lf-str-time
			set ifs-x-login		= substring(ifs-x-string,1,9)
			set ifs-x-ip			= substring(ifs-x-string,21, STRPAT(ifs-x-string,"/") - 1)
			set ifs-n-ip			= 1
			//set ifs-x-data-dir	= substring(ifs-x-string,54, 54 + 40)
			//prowho without -s has no ip address result :
			//insert PRIMARY_HISTORY
//message "zaz x-string:" strconcat(ifs-x-string)
//message "zaz ip:" strconcat(ifs-x-ip)
			insert PRIMARY_PROWHOX_HISTORY
		endif //pattern(ifs-x-string, PROWHO_TAG_HEADER)
	endextract //ff-ext-prowhox all
	//-- --------------
	//-- --------------
	//-- prowho -s ( ^^ above)


	//--
	//-- remove multiple sessions from list :
	set lf-prev-usr = "_blank_state_"
	extract PRIMARY_HISTORY
		on index ifs-n-serial
		//on index KEY_HISTORY //ifs-x-data-dir ifs-x-login ifs-x-date
	before ifs-x-data-dir
		set lf-logins-per-store = zero
	detail
		//-- merge in "prowho -s" into: PRIMARY_HISTORY table
		//-- table for a datagrid of "prowho -s" history log analysis :
		//object ff-ext-prowhox
//zzz zaz
	//extract ff-ext-sys-prowho all
		if pattern(ifs-x-string, "USER")
			//-- ignore header line of external file...
		else
			//set ifs-x-login		= substring(ifs-x-string,1,9)
			insert tmp-ff-prowho
			//prowho -s : set ifs-x-ip			= substring(ifs-x-string,19, STRPAT(ifs-x-string,"/") - 1)
		endif //pattern(ifs-x-string, "SESSIONS")
	//endextract //ff-ext-sys-prowho all

/*
		if lf-prev-usr = STR_PREV_PROWHO_USER
			//-- don't include multi session as this is not included in pronto license count
			delete PRIMARY_HISTORY
		endif
*/
		set lf-prev-usr = STR_PREV_PROWHO_USER
	endextract //PRIMARY_HISTORY
	//--
	//-- merge ip addresses from "prowho -s" log imported into : PRIMARY_PROWHOX_HISTORY
	//--
//#define KEY_HISTORY ifs-x-data-dir ifs-x-login ifs-x-date
//#define KEY_HISTORY2 ifs-x-data-dir ifs-x-date ifs-x-time ifs-x-login
//#define KEY_HISTORY3 ifs-x-ip ifs-x-data-dir ifs-x-date ifs-x-time ifs-x-login
//#define KEY_HISTORY4 ifs-x-login ifs-x-date ifs-x-time
//#define KEY_HISTORY5 ifs-x-date ifs-x-time ifs-x-login ifs-x-ip ifs-x-data-dir
//key is ifs-n-serial
	//--
	extract PRIMARY_HISTORY all
		on index ifs-n-serial
	detail
		save PRIMARY_HISTORY
		set lf-ifs-x-login	= ifs-x-login
		set lf-ifs-x-date		= ifs-x-date
		set lf-ifs-x-time		= ifs-x-time
		set lf-ifs-x-ip		= ifs-x-ip
//-- zaz zxzx zxc -----------------------------------------------------------------------------
/*
if	ifs-x-ip = "10.3.1.135" and
	date2julian(ifs-x-date) = date2julian("25.jul.2014") and
	ifs-x-time = "10:31"
	message "zaz: user ip: " strconcat(ifs-x-login) strconcat(ifs-x-ip) " / " ifs-x-data-dir	
	//ifs-x-data-dir	
endif
*/
//-- zaz zxzx zxc -----------------------------------------------------------------------------
		//object tmp-ff-sysidle-hist like ism-ff-sysidle type memory
		//#define KEY_WHO_1 ifs-x-tty ifs-x-login ifs-x-date ifs-x-time
		get tmp-ff-sysidle-hist
			on index	KEY_WHO_1
			key is	KEY_WHO_1
		on error
			//-- no find on tty lookup
		else
			//-- found -- merge ip address into PRIMARY_HISTORY
			if strconcat(ifs-x-ip) = spaces or ifs-x-login = "root"
				//-- delete records with no ip address :
				//delete PRIMARY_HISTORY
			else
				set lf-ifs-x-ip	= ifs-x-ip
				restore PRIMARY_HISTORY
				set ifs-x-ip		= lf-ifs-x-ip
				save PRIMARY_HISTORY
				update PRIMARY_HISTORY
				//--
				//-- build a count of licenses used per store / dataset coy :
				//-- and count logins per store :
				//--
				get tmp-ff-hist-store //tmp-ff-store
					on index	ifs-x-data-dir ifs-x-date ifs-x-time
					key is	ifs-x-data-dir ifs-x-date ifs-x-time
				on error
					//-- create new
					set ifs-n-stores	= 1
					set ifs-x-ip		= lf-ifs-x-ip
					insert tmp-ff-hist-store //tmp-ff-store
				else
					//-- update
					set ifs-n-stores	+= 1
					set ifs-x-ip		= lf-ifs-x-ip
					update tmp-ff-hist-store //tmp-ff-store
				endon //get tmp-ff-hist-store
				//--
				restore PRIMARY_HISTORY
				//--
				get tmp-ff-hist-ip //tmp-ff-store
					on index KEY_HISTORY3 //ifs-x-ip ifs-x-data-dir ifs-x-date ifs-x-time ifs-x-login
					key is	KEY_HISTORY3
				on error
					//-- create new
					//set ifs-n-stores	= 1
					set ifs-n-ip		= 1
	//message "zaz: ipz : new insert ifs-n-ip : " str(ifs-n-ip)
					insert tmp-ff-hist-ip //tmp-ff-hist-store //tmp-ff-store
				else
					//
	//message "zaz: ipz : else SHOULD NOT GET HERE -- user " strconcat(ws-ifs-x-login) " ipz : " strconcat(ifs-x-ip) " ws-ip : " strconcat(ws-ifs-x-ip)
					set ifs-n-ip		+= 1
					update tmp-ff-hist-ip //tmp-ff-hist-store //tmp-ff-store
				endon //get tmp-ff-hist-ip
			endif //ifs-x-ip = spaces
			//--
		endon //get tmp-ff-sysidle-hist
	endextract //PRIMARY_HISTORY all

	extract PRIMARY_HISTORY all
	detail
		if strconcat(ifs-x-ip "_") = "_" or ifs-x-login = "root"
			//-- delete records with no ip address :
//message "zaz: delete rec. user ip: " strconcat(ifs-x-login) " ip:" strconcat(ifs-x-ip) " / " ifs-x-data-dir
			delete PRIMARY_HISTORY
		endif //ifs-x-ip = spaces
	endextract //PRIMARY_HISTORY all

//message 'zaz: screen-grid-2 : '
//do screen-grid-2	//SCREEN_GRID(PRIMARY_HISTORY,KEY_HISTORY5)
	//-- zxzx

/*
	//-- build a count of licenses used per store / dataset coy :
	//-- and count logins per store :
	extract PRIMARY_HISTORY all
		on index KEY_HISTORY2 //ifs-x-data-dir ifs-x-date ifs-x-time ifs-x-login
		//--
		//-- merge ip address from "prowho -s" log imported into : PRIMARY_PROWHOX_HISTORY
		//--
		push PRIMARY_HISTORY
		//--
		set lf-ifs-x-date		= ifs-x-date
		set lf-ifs-x-time		= ifs-x-time
		set lf-ifs-x-login	= ifs-x-login
		set lf-ifs-x-ip		= ifs-x-ip
		set lf-ifs-x-data-dir = ifs-x-data-dir
		get PRIMARY_PROWHOX_HISTORY
			on index	KEY_HISTORY4 //ifs-x-login ifs-x-date ifs-x-time
			key is	KEY_HISTORY4
		on error
			//-- no find, set ip address = "00."
			set ws-ifs-x-ip	= NO_IP_NUM //"00."//ifs-x-ip
		else 
			//if ws-ifs-x-ip	= NO_IP_NUM
			//	set ws-ifs-x-ip	= ifs-x-ip
			//endif
			//-- update store / dataset info:
			pop PRIMARY_HISTORY
			//set ifs-x-ip	= ws-ifs-x-ip
			//update PRIMARY_PROWHOX_HISTORY
			push PRIMARY_HISTORY
		endon //get PRIMARY_PROWHOX_HISTORY
		//--
		//-- update ip address :
		pop PRIMARY_HISTORY
		set ifs-x-ip	= ws-ifs-x-ip
		update PRIMARY_HISTORY
		//--
		get tmp-ff-hist-store //tmp-ff-store
			on index	ifs-x-data-dir ifs-x-date ifs-x-time
			key is	ifs-x-data-dir ifs-x-date ifs-x-time
		on error
			//-- create new
			set ifs-n-stores	= 1
			set ifs-x-ip		= ws-ifs-x-ip
			insert tmp-ff-hist-store //tmp-ff-store
		else
			//-- update
			set ifs-n-stores	+= 1
			set ifs-x-ip		= ws-ifs-x-ip
			update tmp-ff-hist-store //tmp-ff-store
		endon //get tmp-ff-hist-store
	endextract //PRIMARY_HISTORY all
*/

/*
	//zzz zaz
	//-- count no of duplicate ip addresses : ifs-n-ip			type numeric
	extract PRIMARY_HISTORY all
		on index ifs-n-serial
		//on index KEY_HISTORY3 //ifs-x-ip ifs-x-data-dir ifs-x-date ifs-x-time ifs-x-login
	detail
		//--
		save PRIMARY_HISTORY
		//get tmp-ff-hist-store //tmp-ff-store
		get tmp-ff-hist-ip //tmp-ff-store
			on index KEY_HISTORY3 //ifs-x-ip ifs-x-data-dir ifs-x-date ifs-x-time ifs-x-login
			key is	KEY_HISTORY3
		on error
			//-- create new
			//set ifs-n-stores	= 1
			set ifs-n-ip		= 1
			insert tmp-ff-hist-ip //tmp-ff-hist-store //tmp-ff-store
		else

			//-- a possible duplicate ip address, check if true duplicate via prowhox table :
			set ws-is-duplicate	= true
			//#define KEY_HISTORY3 ifs-x-ip ifs-x-data-dir ifs-x-date ifs-x-time ifs-x-login
			set ws-ifs-x-ip		= ifs-x-ip
			set ws-ifs-x-ip-old	= ifs-x-ip
			set ws-ifs-x-login	= ifs-x-login
			set ws-ifs-x-date		= ifs-x-date
			set ws-ifs-x-time		= ifs-x-time

//message "zaz: possible dup ipz? : user " ws-ifs-x-login
			extract PRIMARY_PROWHOX_HISTORY
				on index KEY_HISTORY4 //ifs-x-login ifs-x-date ifs-x-time
				key is	KEY_HISTORY4
				next same KEY_HISTORY4
				//where	ifs-x-login	= ws-ifs-x-login and
				//		ifs-x-date	= ws-ifs-x-date and
				//		ifs-x-time	= ws-ifs-x-time
			detail
				//--
				if ifs-x-ip != ws-ifs-x-ip
//message "zaz: NOT dup ipz : user " strconcat(ws-ifs-x-login) " ipz : " strconcat(ifs-x-ip) " ws-ip : " strconcat(ws-ifs-x-ip)
					//-- another ip address for same login found ?
					if ifs-x-login = ws-ifs-x-login
						set ws-is-duplicate	= false  //-- not really duplicate ip
						set ws-ifs-x-ip = ifs-x-ip
						restore PRIMARY_HISTORY
						get PRIMARY_HISTORY
							on index ifs-n-serial
							key is	ifs-n-serial
							//on index KEY_HISTORY3 //ifs-x-ip ifs-x-data-dir ifs-x-date ifs-x-time ifs-x-login
						//
						set ifs-x-ip = ws-ifs-x-ip
//message "zaz: ipz a: b4 update primary_hist : " str(ifs-n-ip)
						update PRIMARY_HISTORY
						//push PRIMARY_HISTORY

						get tmp-ff-hist-ip //tmp-ff-store
							on index KEY_HISTORY3 //ifs-x-ip ifs-x-data-dir ifs-x-date ifs-x-time ifs-x-login
							key is	KEY_HISTORY3
						on error
							//-- create new
							//set ifs-n-stores	= 1
							set ifs-n-ip		= 1
//message "zaz: ipz : new insert ifs-n-ip : " str(ifs-n-ip)
							insert tmp-ff-hist-ip //tmp-ff-hist-store //tmp-ff-store
						else
							//
//message "zaz: ipz : else SHOULD NOT GET HERE -- user " strconcat(ws-ifs-x-login) " ipz : " strconcat(ifs-x-ip) " ws-ip : " strconcat(ws-ifs-x-ip)
							set ifs-n-ip		+= 1
							update tmp-ff-hist-ip //tmp-ff-hist-store //tmp-ff-store
						endon //get tmp-ff-hist-ip

					endif //ifs-x-login = ws-ifs-x-login
				endif //ifs-x-ip != ws-ifs-x-ip
			endextract //PRIMARY_PROWHOX_HISTORY

			if ws-is-duplicate
				//-- update
				//set ifs-n-stores	+= 1
				set ifs-n-ip		+= 1
				update tmp-ff-hist-ip //tmp-ff-hist-store //tmp-ff-store
//message "zaz: ipz : duplicate count -- user " strconcat(ws-ifs-x-login) " ipz : " strconcat(ifs-x-ip) " ws-ip : " strconcat(ws-ifs-x-ip)
//message "zaz: ipz : update ip count -- ifs-n-ip : " str(ifs-n-ip)
			endif //ws-is-duplicate
		endon //get tmp-ff-hist-ip //tmp-ff-hist-store
		//--
		//-- update ip count :
		set ws-ifs-n-ip	= ifs-n-ip
		restore PRIMARY_HISTORY
		get PRIMARY_HISTORY
			on index ifs-n-serial
			key is	ifs-n-serial
			//on index KEY_HISTORY3 //ifs-x-ip ifs-x-data-dir ifs-x-date ifs-x-time ifs-x-login
		//
		set ifs-n-ip		= ws-ifs-n-ip
//message "zaz: ipz b: b4 update primary_hist : " str(ifs-n-ip)
		update PRIMARY_HISTORY
	endextract //PRIMARY_HISTORY all
*/
	//--
	//-- empty session logins are not counted as pronto licenses in use, remove these records from list :
	//--
	set lf-z-date = today()
	set lf-a-date = today()
	set lf-z-date = date2julian("01.jan.2014")
	set lf-z-time = 00:01:00 //tod()
	set lf-a-time = 23:01:00 //tod()
	extract tmp-ff-history all
	detail
		//-- get earliest & latest date in log file :
		//-- --------------------------------------------
		//-- earliest log date :
		if date2julian(ifs-x-date) < lf-a-date
/*
message "zaz: a. YES: x-date < a-date ? " ifs-x-date " < " lf-a-date
*/
			set lf-a-date	= date2julian(ifs-x-date)
/*
message "zaz: a. SET : a-date = " lf-a-date
*/
			set lf-a-time = 23:01:00 //tod()
		endif
		//-- latest log date :
		if date2julian(ifs-x-date) > lf-z-date
/*
message "zaz: b. YES: x-date > z-date ? " ifs-x-date " > " lf-z-date
*/
			set lf-z-date	= date2julian(ifs-x-date)
/*
message "zaz: b. SET : z-date = " lf-z-date
*/
			set lf-z-time = 00:01:00 //tod()
		endif
		//-- --------------------------------------------
		//-- get latest time stamp in log file :
		//set lf-z-time	= time-from-date-time( date-time(lf-z-date), true)
		//-- --------------------------------------------
		//-- earliest log time :
		if date2julian(ifs-x-date) = lf-a-date //-- make sure only check times when on earliest date stamp...
			TO_HOUR(ifs-x-time,lf-n-hrs,lf-n-mins) //-- return hour and mins from time in text field format eg. "06:00"
			/*
			set lf-n-hrs	= num( substring(ifs-x-time,1,2) )
			set lf-n-mins	= num( substring(ifs-x-time,4,5) )
			if lf-n-hrs > zero and lf-n-hrs < 7 //pm
				set lf-n-hrs += 12
			endif
			*/
			/*
			if (lf-n-hrs * 3600 + lf-n-mins) < lf-a-time
			*/
			//#define TO_TIME(AHRS,BMINS) (AHRS * 3600 + BMINS)
			if TO_TIME(lf-n-hrs, lf-n-mins) < lf-a-time
				set lf-a-time	= TO_TIME(lf-n-hrs, lf-n-mins)	//-- set lf-x = (lf-n-hrs * 3600 + lf-n-mins)
			endif
//message "zaz: time = " strconcat(ifs-x-time) " - hrs / mins = " str(lf-n-hrs) " / " str(lf-n-mins)
		endif

		//-- latest log time :
		if date2julian(ifs-x-date) = lf-z-date //-- make sure only check latest times when on latest date stamp...
			TO_HOUR(ifs-x-time,lf-n-hrs,lf-n-mins) //-- return hour and mins from time in text field format eg. "06:00"
			/*
			set lf-n-hrs	= num( substring(ifs-x-time,1,2) )
			set lf-n-mins	= num( substring(ifs-x-time,4,5) )
			if lf-n-hrs > zero and lf-n-hrs < 7 //pm
				set lf-n-hrs += 12
			endif
			*/
			/*
			if lf-z-time < (lf-n-hrs * 3600 + lf-n-mins)
			if (lf-n-hrs * 3600 + lf-n-mins) > lf-z-time
			*/
			//#define TO_TIME(AHRS,BMINS) (AHRS * 3600 + BMINS)
			if TO_TIME(lf-n-hrs, lf-n-mins) > lf-z-time
				/*
				set lf-z-time	= (lf-n-hrs * 3600 + lf-n-mins)
				*/
				set lf-z-time	= TO_TIME(lf-n-hrs, lf-n-mins)	//-- set lf-x = (lf-n-hrs * 3600 + lf-n-mins)
			endif
//message "zaz: time = " strconcat(ifs-x-time) " - hrs / mins = " str(lf-n-hrs) " / " str(lf-n-mins)
		endif
		//-- --------------------------------------------
		//--
		if ifs-x-ip = spaces
			//-- decrement the counter of logins for this store :
			get tmp-ff-hist-store
				on index	ifs-x-data-dir ifs-x-date ifs-x-time
				key is	ifs-x-data-dir ifs-x-date ifs-x-time
			on error
				//
			else
				//-- update
				set ifs-n-stores	-= 1
				update tmp-ff-hist-store //tmp-ff-store
			endon //get tmp-ff-hist-store
			//--
			//-- delete the empty ip session record :
			delete tmp-ff-history
		endif
	endextract //tmp-ff-history all
	//--
	/*
	message "Most recent log entries are as at : " lf-z-date	" " lf-z-time
	*/
	message "Earliest & Last entries in Logs, from : " lf-a-date	" " lf-a-time " to : " lf-z-date " " lf-z-time


	//--
	//display concat(" Building history from log files ... " ) @ 22, 5 //foreground prompts
	//--
	//--
endif //if ws-history-count
endif //if not file-exists(XEXT_FILE4,0)
//--
//-- total count of all logins as at latest time/date stamp of log files :
//--
//
detail
	//#define KEY_HISTORY ifs-x-data-dir ifs-x-login ifs-x-date
	//on index	ifs-n-stores ifs-x-data-dir ifs-x-date ifs-x-time descending
	DISPLAY_FLD(ifs-n-stores,	005,"Licenses used") pic zzz9
	DISPLAY_FLD(ifs-x-data-dir,010, "Store / Dataset")
	DISPLAY_FLD(ifs-x-date,		030,"Log Date")
	DISPLAY_FLD(ifs-x-time,		040,"Time")
	//DISPLAY_FLD(ifs-x-login,	050,"User")



	/*
	if IS_ADMIN_USER(ifs-x-login)
		//-- separate high-light if user login is an admin user :
		DISPLAY_FLD(ifs-x-login,	050,"User") COLOUR_HIGHLIGHT_ADMIN
	else
		DISPLAY_FLD(ifs-x-login,	050,"User")
	endif //IS_ADMIN_USER(ifs-x-login)
	*/
	//
	//DISPLAY_FLD(ifs-n-stores,		050,"per Store") pic zzz9
	//
	//DISPLAY_FLD(fstr(ifs-n-stores,4,0),	010, "Logins") //pic zzz9vzz
	//DISPLAY_FLD(ifs-x-data-dir,	020, "Store / Dataset")
	//DISPLAY_FLD(ifs-n-tty,		020,"Pronto Licenses")
confirm
	auto
confirmed
	switch on screen-mode()
	case md-all-logins
		//
		//push PRIMARY_STORE
		push tmp-ff-hist-store
		//-- open up screen filtered on this store only :
		set ws-store-filter = spaces
//message 'zaz: screen-grid-1 : '
//do screen-grid-1	//SCREEN_GRID(PRIMARY_HISTORY,KEY_HISTORY5)
		do display-in-grid-hist-when
		//--
		//pop PRIMARY_STORE
		pop tmp-ff-hist-store
		get * from tmp-ff-hist-store //PRIMARY_STORE
			on error endon
		//
		refresh review
		//--
	case md-logins
		//push PRIMARY_STORE
		push tmp-ff-hist-store
		//-- open up screen filtered on this store only :
		set ws-store-filter = STORE_LOG_HIST_FILTER
		do display-in-grid-hist-when
		set ws-store-filter = spaces
		//--
		//pop PRIMARY_STORE
		pop tmp-ff-hist-store
		get * from tmp-ff-hist-store //PRIMARY_STORE
			on error endon
		//
		refresh review
		//--
	endswitch
endconfirm
endscreen // grid-by-history --------------------------------------------------

//do display-in-grid-hist-when
screen display-in-grid-hist-when //grid-by-history
	local field	lf-str-date type string
					lf-str-time type string
					lf-prev-usr type string
					lf-logins-per-store like ifs-n-stores	//type numeric
	window @1,1 to @19,90
	title concat( strconcat(ws-store-filter) "  - "
						"PROWHO Log - History by Store" )
	primary PRIMARY_HISTORY
		on index KEY_HISTORY2 //#define KEY_HISTORY2 ifs-x-data-dir ifs-x-date ifs-x-time ifs-x-login
/*
	primary PRIMARY_PROWHOX_HISTORY //like ism-ff-sysidle type memory
		on index KEY_HISTORY3 //ifs-x-ip ifs-x-data-dir ifs-x-date ifs-x-time ifs-x-login
*/
/*
	primary tmp-ff-hist-store //tmp-ff-store
		on index	ifs-x-data-dir ifs-x-date ifs-x-time
*/
	datagrid occurs 15
		when 
			(ws-store-filter = spaces or
			ws-store-filter = STORE_LOG_HIST_FILTER )
//STORE_LOG_HIST_FILTER concat(strconcat(ifs-x-data-dir) ", " strconcat(ifs-x-date) ", " strconcat(ifs-x-time) )
	allowed search //md-logins search
	review-from-start
before
//
detail
	//on index KEY_HISTORY2 //#define KEY_HISTORY2 ifs-x-data-dir ifs-x-date ifs-x-time ifs-x-login
	DISPLAY_FLD(ifs-x-data-dir,010, "Store / Dataset")
	DISPLAY_FLD(ifs-x-date,		030,"Log Date")
	DISPLAY_FLD(ifs-x-time,		040,"Time")
	DISPLAY_FLD(ifs-x-login,	050,"User")
	DISPLAY_FLD(ifs-x-ip,		060,"ip address")
	//DISPLAY_FLD(ifs-n-ip,		070,"ip count") pic zzz9
	//zaz
	//set ifs-x-ip			= substring(ifs-x-string,21, STRPAT(ifs-x-string,"/") - 1)
	/*
	if IS_ADMIN_USER(ifs-x-login)
		//-- separate high-light if user login is an admin user :
		DISPLAY_FLD(ifs-x-login,	050,"User") COLOUR_HIGHLIGHT_ADMIN
	else
		DISPLAY_FLD(ifs-x-login,	050,"User")
	endif //IS_ADMIN_USER(ifs-x-login)
	*/
	//
	//DISPLAY_FLD(ifs-n-stores,		050,"per Store") pic zzz9
	//
	//DISPLAY_FLD(fstr(ifs-n-stores,4,0),	010, "Logins") //pic zzz9vzz
	//DISPLAY_FLD(ifs-x-data-dir,	020, "Store / Dataset")
	//DISPLAY_FLD(ifs-n-tty,		020,"Pronto Licenses")
confirm
	auto
confirmed
/*
	switch on screen-mode()
	case md-logins
		//push PRIMARY_STORE
		push tmp-ff-hist-store
		//-- open up screen filtered on this store only :
		set ws-store-filter = ifs-x-data-dir
		do display-in-grid-hist-when
		set ws-store-filter = spaces
		//--
		//pop PRIMARY_STORE
		pop tmp-ff-hist-store
		get * from tmp-ff-hist-store //PRIMARY_STORE
			on error endon
		//
		refresh review
		//--
	endswitch
*/
endconfirm
endscreen // display-in-grid-hist-when //grid-by-history
//endscreen // grid-by-history --------------------------------------------------


/*
field ws-store-filter		like ifs-x-data-dir
*/
#define PRIMARY_STORE tmp-ff-store
//do grid-by-store
screen grid-by-store
	window @1,1 to @19,90
	title concat(PROG_TITLE " " str(ws-idle-count) " idle for over " str(ws-max-idle-hours) " hrs (as at " ws-as-at-time-stamp ")  -  " str(ws-licenses) " Pronto licenses are currently in use" )
	/*
	title concat(PROG_TITLE " " str(ws-idle-count) " as at " ws-as-at-time-stamp " idle for over " str(ws-max-idle-hours) " hrs   -  " str(ws-licenses) " Pronto licenses are currently in use" )
	title concat(PROG_TITLE " " str(ws-idle-count) " idle for over " str(ws-max-idle-hours) " hrs   -  " str(ws-licenses) " Pronto licenses are currently in use" )
	*/
	primary PRIMARY_STORE
		on index ifs-n-stores descending
	datagrid occurs 15
	allowed md-logins search
	review-from-start
before
detail
	DISPLAY_FLD(fstr(ifs-n-stores,4,0),	010, "Logins") //pic zzz9vzz
	DISPLAY_FLD(ifs-x-data-dir,	020, "Store / Dataset")
	//DISPLAY_FLD(ifs-n-tty,		020,"Pronto Licenses")
confirm
	auto
confirmed
	switch on screen-mode()
	case md-logins
		push PRIMARY_STORE
		//-- open up screen filtered on this store only :
		set ws-store-filter = ifs-x-data-dir
		do display-in-grid-when
		set ws-store-filter = spaces
		//--
		pop PRIMARY_STORE
		get * from PRIMARY_STORE
			on index ifs-n-stores descending
			key		ifs-n-stores //descending
		on error endon
		//
		refresh review
		//--
	endswitch
endconfirm
endscreen // grid-by-store --------------------------------------------------

screen display-in-grid-when
	local field	lf-idle-hrs	type numeric
					lf-i			type numeric
					lf-j			type numeric
					lf-x-ip		like ifs-x-ip
					lf-x-ip-cnt	type numeric
					lf-row		type numeric
					lf-first-time type boolean
	window @1,1 to @24,90
		//
		title concat(
			strconcat(ws-store-filter) "  - "
			PROG_TITLE " " 
			str(ws-idle-count) " idle for over " 
			str(ws-max-idle-hours) " hrs (as at " 
			ws-as-at-time-stamp ")  -  " 
			//str(ws-licenses) " Pronto licenses are currently in use" )
			"duplicate ip's are highlighted" )
		/*
		title concat(PROG_TITLE " " 
			str(ws-idle-count) " as at " ws-as-at-time-stamp " idle for over " 
			str(ws-max-idle-hours) " hrs   -  duplicate ip's are highlighted" )
		title concat(PROG_TITLE " " 
			str(ws-idle-count) " idle for over " 
			str(ws-max-idle-hours) 
			" hrs  -   duplicate ip's are highlighted" )
		*/
			/*
			" hrs  -   Hit  PageUp  key to reveal duplicate ip's " )
			*/
		//
		primary PRIMARY_TABLE //tmp-ff-sysidle //
			on index	ifs-x-data-dir ifs-x-ip
			same		ifs-x-data-dir
		//
		datagrid occurs 20
		when 
			ifs-x-data-dir = ws-store-filter
	/*
	allowed md-tag md-kill search
	*/
	allowed search
	review-from-start
before
	//set ws-tag-count = zero
	set lf-x-ip-cnt	= zero
	set lf-x-ip			= spaces
	set lf-row			= zero
	set lf-first-time	= true
detail
	DISPLAY_FLD(ifs-x-data-dir,002, "Dataset / Store")
	//-- check for duplicate ip addresses, and highlight them :
	if lf-x-ip = ifs-x-ip and review-row() != lf-row
		set lf-x-ip-cnt += 1
	//endif
	//if lf-x-ip-cnt > zero //and lf-x-ip = ifs-x-ip
		DISPLAY_FLD(ifs-x-ip,			004,"ip address") COLOUR_HIGHLIGHT
		set lf-x-ip-cnt = zero
	else
		DISPLAY_FLD(ifs-x-ip,			004,"ip address")
	endif
	//
	DISPLAY_FLD(ifs-x-idle,		005,"idle")
	//
	if IS_ADMIN_USER(ifs-x-login)
		//-- separate high-light if user login is an admin user :
		DISPLAY_FLD(ifs-x-login,	009,"User") COLOUR_HIGHLIGHT_ADMIN
	else
		DISPLAY_FLD(ifs-x-login,	009,"User")
	endif //if IS_ADMIN_USER(ifs-x-login)
	//
	DISPLAY_FLD(ifs-x-tty,		020,"tty")
	//
	//display ifs-x-ip		@1,059 title "ip address"
	DISPLAY_FLD(ifs-x-date,		030,"Login")
	DISPLAY_FLD(ifs-x-time,		040,"Time")
	//splay ifs-x-login	@1,009 title "User"
	DISPLAY_FLD(ifs-x-task,			065, "Task")
	//DISPLAY_FLD(ifs-x-data-dir,	066, "Dataset / Store")
	//display "Y" @1,003 title "tag"
	//DISPLAY_FLD(" ",				070,"tag")
	set lf-x-ip = ifs-x-ip
	set lf-row = review-row()
confirm
	auto
confirmed
/*
	switch on screen-mode()
*/
endconfirm
endscreen // display-in-grid-when --------------------------------------------------

//SCREEN_GRID(tmp-sort-file,TMP_KEY1)
#define SCREEN_GRID(ATABLE,BKEY) \
	window @1,1 to @19,90 \
	title concat(" ATABLE ") \
	primary ATABLE \
		on index BKEY \
	datagrid occurs 15 \
	allowed search \
	review-from-start \
before \
detail \
	DISPLAY_FLD(ifs-x-data-dir,010, "ds / store") /* COLOUR_HIGHLIGHT */ \
	DISPLAY_FLD(ifs-x-login,	015, "User") /* COLOUR_HIGHLIGHT_ADMIN */ \
	DISPLAY_FLD(ifs-x-ip,		020, "ip #") \
	DISPLAY_FLD(ifs-x-date,		030, "Login") \
	DISPLAY_FLD(ifs-x-time,		040, "Time") \
	DISPLAY_FLD(ifs-x-tty,		050, "tty") \
	/* DISPLAY_FLD(ws-date,			010, "D/stamp") pic dd-mmm-yy  zzz9 */	\
confirm \
	auto \
confirmed \
	/* switch on screen-mode() */ \
	/* case md-all-logins */ \
	/* endswitch */ \
endconfirm
//end-#define SCREEN_GRID(ATABLE,BKEY)


//object tmp-ff-sysidle-hist like ism-ff-sysidle type memory

//do screen-grid-1
screen screen-grid-1
	SCREEN_GRID(tmp-ff-sysidle-hist, KEY_WHO_1)
	//SCREEN_GRID(PRIMARY_HISTORY,KEY_HISTORY5)
endscreen //screen-grid-1

//do screen-grid-2	//SCREEN_GRID(PRIMARY_HISTORY,KEY_HISTORY5)
screen screen-grid-2
	SCREEN_GRID(PRIMARY_HISTORY,KEY_HISTORY5)
endscreen //screen-grid-2

screen display-in-grid
	local field	lf-idle-hrs	type numeric
					lf-i			type numeric
					lf-j			type numeric
	window @1,1 to @24,90
		//
		title concat(PROG_TITLE " " str(ws-idle-count) " idle for over " str(ws-max-idle-hours) " hrs (as at " ws-as-at-time-stamp ")  -  " str(ws-licenses) " Pronto licenses are currently in use" )
		/*
		title concat(PROG_TITLE " " str(ws-idle-count) " idle for over " str(ws-max-idle-hours) " hrs   -  " str(ws-licenses) " Pronto licenses are currently in use" )
		*/
		//
		//title concat(PROG_TITLE " for over " str(ws-max-idle-hours) " hours" )
		//title concat("Finance Sales - " julian2date(ws-start-date) " to " julian2date(ws-end-date) " for " str(ws-max-idle-hours) " datasets" )
	/* //<
		title concat("Finance Sales")
		primary tmp-ff-sysidle
	*/ //>
		//primary ism-ff-sysidle //
		primary PRIMARY_TABLE //tmp-ff-sysidle //
			on index ifs-x-idle ifs-x-login
		/*
			on index ifs-x-login
		*/
		datagrid occurs 20
		//key is ism-sys-con dr-tr-territory trans-date
	/* //<
	allowed md-so-enq search //md-mode
	*/ //>
//<
	/*
	allowed md-tag md-kill search
	allowed search md-tag md-kill 
	*/
	allowed md-tag-flip md-tag md-stores md-history-analysis md-kill search
	//allowed	//search md-so-enq //md-mode
				//md-maintain-datasets-for-inclusion //md-list-global-terr-whse md-build-all //md-mode
				//md-build-all
	/*
	ffaudit.spl : allowed search md-maintain-datasets-for-inclusion md-list-global-terr-whse md-build-all //md-mode
	*/
//>
	review-from-start
before
	set ws-tag-count = zero
	//-- build on-help F2 list for sys-con "search"
/*
	open tmp-sys-con
		truncate temporary
	extract ism-ff-sysidle
	detail
		get tmp-sys-con
			on index	cso-div
			key is	cso-div
		on error
			insert tmp-sys-con
		endon //get tmp-sys-con
	endextract //consolidated-sales-order ism-ff-po
*/
detail
/*
	Note: this doesn't follow style rules but the following need to be accepts that
	are _never_ accepted. This is due to the index on primary table.
	-- Even as a 'display', the following are still 'asked' for, during find mode...

	//primary ism-ff-sysidle
	//key is ism-sys-con dr-tr-territory trans-date
	//
	display ism-sys-con			@1,009 title "Div"
*/
	//display ism-sys-con			@1,009 title "Div"
	if ifs-b-tag
		DISPLAY_FLD(ifs-x-idle,		005,"idle")		COLOUR_HIGHLIGHT
	else
		DISPLAY_FLD(ifs-x-idle,		005,"idle")
	endif //if ifs-b-tag
	/*
	DISPLAY_FLD(ifs-x-login,	009,"User")
	*/
	if IS_ADMIN_USER(ifs-x-login)
		//-- separate high-light if user login is an admin user :
		DISPLAY_FLD(ifs-x-login,	009,"User") COLOUR_HIGHLIGHT_ADMIN
	else
		DISPLAY_FLD(ifs-x-login,	009,"User")
	endif //if IS_ADMIN_USER(ifs-x-login)
	//
	if ifs-b-tag
		DISPLAY_FLD(ifs-x-tty,		020,"tty")		COLOUR_HIGHLIGHT
	else
		DISPLAY_FLD(ifs-x-tty,		020,"tty")
	endif //if ifs-b-tag
	//
	//display ifs-x-ip		@1,059 title "ip address"
	DISPLAY_FLD(ifs-x-ip,		025,"ip address")
	DISPLAY_FLD(ifs-x-date,		030,"Login")
	DISPLAY_FLD(ifs-x-time,		040,"Time")
	//splay ifs-x-login	@1,009 title "User"
	//splay ifs-x-tty		@1,020 title "tty"
	//splay ifs-x-date	@1,030 title "Login"
	//splay ifs-x-time	@1,040 title "Time"
	//splay ifs-x-idle	@1,050 title "idle"
	/*
	*/
	/*
	display ifs-x-string	@1,090 title "_   output line unformatted"
	*/
	//

	DISPLAY_FLD(ifs-x-task,			065, "Task")
	//DISPLAY_FLD(ifs-x-data-dir,	066, "Dataset / Store")
	if ifs-b-tag
		DISPLAY_FLD(ifs-x-data-dir,066, "Dataset / Store") COLOUR_HIGHLIGHT
	else
		DISPLAY_FLD(ifs-x-data-dir,066, "Dataset / Store")
	endif //if ifs-b-tag

	if ifs-b-tag
		//display "Y" @1,003 title "tag"
		DISPLAY_FLD("Y",				070,"tag")
	else
		DISPLAY_FLD(" ",				070,"tag")
	endif //if ifs-b-tag
/*
	accept ism-sys-con			@1,009 title "Div"
		show-value
		default cso-div
		help "F2 = List of Stores                           Store Code / Dataset Coy Code"
	//-- note : a failed LOOKUP will ( SHOULD ) invoke the F2 HELP-SCREEN section
	lookup tmp-sys-con
		on index	cso-div
		key is	cso-div
	//-- F2 on-help HELP-SCREEN section :
	help-screen
		primary tmp-sys-con @1,02
		occurs 15
		showing	cso-div "Store"
		using		cso-div
	//
	//display dr-tr-territory	@1,010 title "Territory"
	accept dr-tr-territory		@1,010 title "Territory"
		help "Territory Code"
		ACCEPT_NEVER_ACCEPTED
	//
	//display accountcode		@1,020 title "Acct"
	//ACCEPT_READ_ONLY_TITLE_HELP(AFLD,BROW,CCOL,DTITLE,EHELP)
	ACCEPT_READ_ONLY_TITLE_HELP(accountcode,		1, 20, "Acct", "Account Code")
	ACCEPT_READ_ONLY_TITLE_HELP(dr-tr-order-no,	1, 24, "S/O", "S/O No.")
	ACCEPT_READ_ONLY_TITLE_HELP(dr-tr-bo-suffix,	1, 26, "Suff", "S/O Suffix")
	ACCEPT_READ_ONLY_TITLE_HELP(tr-details,		1, 30, "Details", "TR Details")
	ACCEPT_READ_ONLY_TITLE_HELP(trans-type,		1, 40, "Type", "TR Type")
	//display trans-date			@1,050 title "Date"
	accept trans-date				@1,050 title "Date"
		help "TR Date"
		ACCEPT_NEVER_ACCEPTED
	//
	ACCEPT_READ_ONLY_TITLE_HELP(tr-amount,			1, 60, "Amount", "TR Amount")
	ACCEPT_READ_ONLY_TITLE_HELP(dr-tr-spare-1,	1, 70, "Open/Arc", "Open/Archive")
*/
confirm
	auto
confirmed
	switch on screen-mode()
	case md-tag-flip
		push PRIMARY_TABLE
		//
		extract PRIMARY_TABLE all
		set ifs-b-tag = (not ifs-b-tag)
		if ifs-b-tag
			set ws-tag-count += 1
		else
			set ws-tag-count -= 1
		endif
		update PRIMARY_TABLE
		endextract //PRIMARY_TABLE
		//
		pop PRIMARY_TABLE
		get * from PRIMARY_TABLE //tmp-ff-sysidle //
			on index	ifs-x-idle ifs-x-login
			key		ifs-x-idle ifs-x-login
		on error endon
		//
		//refresh data
		refresh review

	case md-kill
		//-- kill tagged lines :
		if ws-tag-count < 1
			message "No tagged lines found to Kill."
		else
			IF_MSG_BOX("Confirm Kill","Go ahead and Kill these processes?")
				/*
				set xstr = "pkill -KILL -t"
				*/
				push PRIMARY_TABLE
				set lf-i = zero
				set lf-j = zero
				set xstr = spaces
				extract PRIMARY_TABLE all
					if ifs-b-tag = true
						//DISPLAY_FLD(ifs-x-idle,		005,"idle")
						//message concat("zaz: idle = " str(num( substring(ifs-x-idle,1,2) )) )
						set lf-idle-hrs = num( substring(ifs-x-idle,1,2) )
						/*
						if lf-idle-hrs > 1
						*/
//set ifs-x-ip			= substring(ifs-x-string, STRPAT(ifs-x-string,"(") + 1, STRPAT(ifs-x-string,")") - 1)

							//--
							//-- check that current tty is still an idle session
							//-- (datagrid view may be 5 mins or more "stale" and user hit "kill tagged" button on old idle data)
							//--
							set ystr = spaces
							set ystr = concat("who -u|grep " '"' strconcat(ifs-x-tty) ' "'  " > " XEXT_FILE)
							command "sh" parameters "-c" ystr
//message "zaz: ystr: " ystr
							//-- 
							push PRIMARY_TABLE
							//-- 
							set ws-check-only = true
							do extract-ff-idle
							restore tmp-ff-sysidle
							//-- 
							set lf-idle-hrs = num( substring(ifs-x-idle,1,2) )
//message "zaz: tty / idle / max-idle: " strconcat(ifs-x-tty) " / " str(lf-idle-hrs) " / " str(ws-max-idle-hours)
							if lf-idle-hrs >= ws-max-idle-hours
								//--
//message "zaz: STILL IDLE: tty / idle / max-idle: " strconcat(ifs-x-tty) " / " str(lf-idle-hrs) " / " str(ws-max-idle-hours)
							set lf-i += 1
							if lf-i > 1
								set xstr = concat(strconcat(xstr) "," strconcat(ifs-x-tty))
							else
								set xstr = strconcat(ifs-x-tty)
							endif
							//
							pop PRIMARY_TABLE
							if IS_ADMIN_USER(ifs-x-login)
								//-- separate high-light if user login is an admin user :
								set lf-j += 1
							endif //if IS_ADMIN_USER(ifs-x-login)
							//
							delete PRIMARY_TABLE
							//--
								//--
							endif //if lf-idle-hrs >= ws-max-idle-hours
						//else
						//	message concat("Kill ignored for '" strconcat(ifs-x-tty) "', idle for less than 2 hours.")
						//
						/*
						endif // if lf-idle-hrs < 1
						*/
					endif
				endextract //PRIMARY_TABLE
				set xstr = concat("pkill -KILL -t " strconcat(xstr) )
				set xstr = concat("sudo " strconcat(xstr) )
			/*
				if lf-i < 1
					message "Idle for under 2 hours. No sessions killed."
				else
			*/
					if lf-j > zero
						message "About to kill " str(lf-i) " sessions, of which " str(lf-j) " are admin group users."
						message "About to kill " str(lf-i) " sessions, of which " str(lf-j) " are admin group users."
					else
						message "About to kill " str(lf-i) " sessions."
						message "About to kill " str(lf-i) " sessions."
					endif
//zzz zaz
//message concat("zaz: " xstr)
//message concat("zaz: " xstr)
					command "sh" parameters "-c" xstr
			/*
				endif //if lf-i < 1
			*/
				//review-from-start
				//-- go to top of datagrid
				/*
						get * from PRIMARY_TABLE //tmp-ff-sysidle //
							on index ifs-x-idle ifs-x-login
							first
				*/
				pop PRIMARY_TABLE
				get * from PRIMARY_TABLE //tmp-ff-sysidle //
					on index	ifs-x-idle ifs-x-login
					key		ifs-x-idle ifs-x-login
				on error endon
				//
				//refresh data
				refresh review
			ENDIF_MSG_BOX
		endif //if ws-tag-count < 1
	//--
	case md-history-analysis //prompt "History by Store"
		//-- history analysis of prowho sessions per store.
		//accept ws-start-date    @20, 5 title "From date (earliest logs are from 22.7.2014)"
		//	default ws-start-date
		message "Please note: this will take a few minutes to build from log file history ..."
		display concat("            Building history from log files ... " ) @ 22, 5 //foreground prompts
		push PRIMARY_TABLE
		do grid-by-history
		display concat("                                                " ) @ 22, 5 foreground prompts
		pop PRIMARY_TABLE
		get PRIMARY_TABLE on error endon
		refresh review

	case md-stores
		push PRIMARY_TABLE
		do grid-by-store
		pop PRIMARY_TABLE
		get PRIMARY_TABLE on error endon
		refresh review

	case md-tag
		set ifs-b-tag = (not ifs-b-tag)
		if ifs-b-tag
			set ws-tag-count += 1
		else
			set ws-tag-count -= 1
		endif
		update PRIMARY_TABLE
		//refresh data
		refresh review
/*
		case md-so-enq
//<
			get system-companies
				on index sys-comp-code
				key ism-sys-con			//like sys-consolidation-division
				//key cso-div
			on error
				message concat("No find sys-comp-code : sys-comp-code of " ism-sys-con)
				//message concat("No find sys-comp-code : sys-comp-code of " cso-div)
			else
*/

/*
set xstr = concat("cd " strconcat(sys-comp-path) ";prospl so/m5ordenq -e " str(cso-so-order-no) " " cso-so-invoice-no)
message concat("zaz: xstr=" xstr)
				command "sh"
					parameters
						"-c"
						xstr
message concat("zaz: so/m5ordenq call ..." )
*/
//message concat("zaz : home cd = " strconcat(sys-comp-path))
//>
/*
			spl "so/m5ordenq"
				home sys-comp-path //
				parameters
					"-e"
					dr-tr-order-no
					dr-tr-bo-suffix
					dr-tr-order-no
//<
			endon //get system-companies
*/
/*
		case md-build-all
			if sys-consolidation-division = "MAS"
				//set ws-start-date	= date2julian("01.nov.2013")
				//set ws-end-date	= date2julian("30.nov.2013")
				//set ws-amount-threshold = 500
				do build-all
				//do dig-global-audit
				//-- do display-in-grid
				//do dig-disc-reconcile
				X_LOAD_REBUILD //-- restore last entered criteria
				do display-in-grid
				exit
			else
				message "Cannot run Build All in " sys-consolidation-division
			endif
*/
/*
		case md-maintain-datasets-for-inclusion
			open tmp-system-user truncate temporary
			//like system-user type memory // for user/company sort seq -user-user-only-spare-flag2-1 for tag
			extract system-user
				on index user-id sys-comp-code
				key is login-id() SPACES
				next same user-id
			detail
				get system-companies
					on index sys-comp-code
				on error
					continue
				endon
				set user-position 					= sys-comp-desc
				set user-user-only-spare-flag2-1	= sys-comp-spare2
				insert tmp-system-user
			endextract
			do maintain-datasets-for-inclusion
//>
*/
	endswitch
endconfirm
endscreen // display-in-grid --------------------------------------------------

//<
/*
#define X_SAVE_REBUILD \
	open ism-ff-mem \
	on error \
		message "Cannot open ism-ff-mem, will create new instance" \
		open ism-ff-mem create permanent \
	endon \
	get ism-ff-mem \
		on index ifm-c-code \
		key X_KEY \
	on error \
		set ifm-c-code			= X_KEY \
		insert ism-ff-mem \
		get ism-ff-mem \
			on index ifm-c-code \
		key X_KEY \
	endon \
	set ifm-d-start-date		= ws-start-date \
	set ifm-d-end-date		= ws-end-date \
	set ifm-n-max-datasets	= ws-max-idle-hours \
	set ifm-n-threshold		= ws-amount-threshold \
	update ism-ff-mem
//-- end-define X_SAVE_REBUILD
*/

procedure build-all
local field
	i		type numeric
	j		type numeric
	/*
	do get-date-range entry once
	*/
	set ws-start-date	= date2julian("01.nov.2013")
	set ws-end-date	= date2julian("30.nov.2013")
	set ws-amount-threshold = 6000
	set ws-max-idle-hours = 3 //5 //100 //for testing
	do get-user-input entry-once
	//
//message ws-confirm //zaz
	if ws-confirm = TRUE
		//clear existing values
		open ism-ff-sysidle truncate permanent
//		do unload-temp
		//-- 
		//-- save REBUILD criteria first :
		//-- ------------------------------
		//X_SAVE_REBUILD
		//-- 
		//set ws-max-idle-hours = 5 //5 //100 //for testing
		//report "Finance Sales (deb/bpfsff)"
	/*
		report concat(PROG_TITLE " (sys/sys_idle_user_logins)")
			spool-only
			set i = 1
			set j = ws-max-idle-hours //5 //100 //for testing
			extract system-companies
			detail
				//message "i: " i "  j:" j
				if i > j
					break
				endif
				if sys-comp-spare2 = "Y"
					print
						today()
						tod()
						sys-comp-code
						sys-comp-desc
						sys-comp-spare2
						"bpfsff called"
set xstr = concat("cd " strconcat(sys-comp-path) ";prospl pvi-snz/deb/bpfsff -buildonly " julian-to-date(ws-start-date) " " julian-to-date(ws-end-date) " " str(ws-amount-threshold) " " str(i) " " str(ws-max-idle-hours) )
//message strconcat("zaz: xstr = " xstr)
					command "sh"
						parameters
							"-c"
							xstr
					set i += 1
				else
					print
						today()
						tod()
						sys-comp-code
						sys-comp-desc
						sys-comp-spare2
						"bpfsff not called"
				endif
			endextract
			//do load-temp //{8}
		report finished
	*/
	endif
endprocedure // build-all -----------------------------------------------------

screen maintain-datasets-for-inclusion
	window @1,1 to @24,50
		title concat("Maintain Datasets for inclusion")
		//primary system-companies
		primary tmp-system-user
			on index user-id user-menu-seq-no
		datagrid occurs 20
	allowed md-tag search //md-mode
	review-from-start
detail
	display sys-comp-code									@1,010 title "Div"
	//display sys-comp-desc       							@1,020 title "Name"
	display user-position 				        			@1,020 title "Name"
	//display concat(sys-comp-spare2 "        ")			@1,030 title "Include"
	display concat(user-user-only-spare-flag2-1 "     ")    @1,030 title "Include"
confirm
	auto
confirmed
	switch on screen-mode()
		case md-tag
			get system-companies
				on index sys-comp-code
			on error
				message "Cannot Find Company " sys-comp-code
			else
				if sys-comp-spare2 = SPACES
					set sys-comp-spare2 = "Y"
					set user-user-only-spare-flag2-1 = "Y"
				else
					set sys-comp-spare2 = SPACES
					set user-user-only-spare-flag2-1 = SPACES
				endif
				update system-companies
				update tmp-system-user
				//refresh data
				refresh review
			endon
	endswitch
endconfirm
endscreen // maintain-datasets-for-inclusion ----------------------------------
//>


/*
// BP finance sales report by finance provider - archived
select
	accountcode
	br-acc-code
	trans-type
	trans-date
	tr-details
	tr-amount
	dr-tr-territory
	tr-details-short = substring (tr-details 1 3)
	start-date = input date "what is the start date?"
	end-date = input date "what is the end date?"
from
	outer deb-master
	deb-trans
    deb-trans-archive
where
     br-acc-code = " " AND
	(tr-details-short = "BC#" or tr-details-short = "BE#" or tr-details-short = "CE#" or tr-details-short = "GE#") AND
//	tr-amount > 0 AND
	(trans-type = "PD" or trans-type = "JE" or trans-type = "CR") AND
	(trans-date between start-date and end-date)

order by dr-tr-territory, tr-details-short

format is rpt
field total-tr-amount like tr-amount
field sub-tot-tr-amount like tr-amount
field sub-finco-tr-amount like tr-amount
field subsub-no-fin-trans like tr-amount
field sub-no-fin-trans like tr-amount
field no-fin-trans like tr-amount

report header
	page
	set total-tr-amount = 0
	set no-fin-trans = 0
header
	print
		"Finance sales report by finance provider - archived" in col 1
		today() in col 95
		tod() in col 108
		"Pageno." in col 118
		pageno() in col 126
	print
		"from" in col 5
		start-date in col 10
		"to " in col 22
		end-date in col 25
	skip 1
	print
		"territory" in col 7
		"tr-details" in col 22
		"trans-type" in col 41
		"trans-date" in col 59
		"tr-amount" in col 83
	skip 1
before dr-tr-territory
	set sub-tot-tr-amount = 0
	set sub-no-fin-trans = 0
before tr-details-short
	set sub-finco-tr-amount = 0
	set subsub-no-fin-trans = 0
skip 1
detail
	set total-tr-amount += tr-amount
	set sub-tot-tr-amount += tr-amount
	set sub-finco-tr-amount += tr-amount
	set subsub-no-fin-trans += 1
	set sub-no-fin-trans += 1
	set no-fin-trans += 1
// START PRINTING LINE DETAILS HERE
	print
		dr-tr-territory in col 7
		accountcode in col 12
		tr-details in col 22
		trans-type in col 41
		trans-date in col 59
		tr-amount in col 77
// END PRINTING LINE DETAILS HERE
after tr-details-short
		print "Subtotal for" in col 53 no newline
		print tr-details in col 66 no newline
		print "in " in col 70 no newline
		print dr-tr-territory in col 73 no newline
		print sub-finco-tr-amount in col 77 no newline
		print subsub-no-fin-trans in col 97
after dr-tr-territory
		print "-----------------" in col 77
		print "SUBTOTAL FOR" in col 56 no newline
		print dr-tr-territory in col 69 no newline
		print sub-tot-tr-amount in col 77 no newline
		print sub-no-fin-trans in col 97
skip 1
report footer
	print
		"-----------------" in col 77
	print
		total-tr-amount in col 77 no newline
		print no-fin-trans in col 97
*/



/*
// BP finance sales report by finance provider - current
select
	accountcode
	br-acc-code
	trans-type
	trans-date
	tr-details
	tr-amount
	dr-tr-territory
	tr-details-short = substring (tr-details 1 3)
	start-date = input date "what is the start date?"
	end-date = input date "what is the end date?"
from
    deb-trans
where
	br-acc-code LIKE " " AND
	(tr-details-short = "BC#" or tr-details-short = "BE#" or tr-details-short = "CE#" or tr-details-short = "GE#") AND
//	tr-amount > 0 AND
	(trans-type = "PD" or trans-type = "JE" or trans-type = "CR") AND
	(trans-date between start-date and end-date)

order by dr-tr-territory, tr-details-short

format is rpt

field total-tr-amount like tr-amount
field sub-tot-tr-amount like tr-amount
field sub-finco-tr-amount like tr-amount
field subsub-no-fin-trans like tr-amount
field sub-no-fin-trans like tr-amount
field no-fin-trans like tr-amount

report header
	page
	set total-tr-amount = 0
	set no-fin-trans = 0
header
	print
		"Finance sales report by finance provider - current" in col 1
		today() in col 95
		tod() in col 108
		"Pageno." in col 118
		pageno() in col 126
	print
		"from" in col 5
		start-date in col 10
		"to " in col 22
		end-date in col 25
	skip 1
	print
		"territory" in col 7
		"tr-details" in col 22
		"trans-type" in col 41
		"trans-date" in col 59
		"tr-amount" in col 83
	skip 1
before dr-tr-territory
	set sub-tot-tr-amount = 0
	set sub-no-fin-trans = 0
before tr-details-short
	set sub-finco-tr-amount = 0
	set subsub-no-fin-trans = 0
skip 1
detail
	set total-tr-amount += tr-amount
	set no-fin-trans += 1
// START PRINTING LINE DETAILS HERE
	print
		dr-tr-territory in col 7
		accountcode in col 12
		tr-details in col 22
		trans-type in col 41
		trans-date in col 59
		tr-amount in col 77
// END PRINTING LINE DETAILS HERE
	set sub-finco-tr-amount += tr-amount
	set subsub-no-fin-trans += 1
after tr-details-short
		print "Subtotal for" in col 53 no newline
		print tr-details in col 66 no newline
		print "in " in col 70 no newline
		print dr-tr-territory in col 73 no newline
		print sub-finco-tr-amount in col 77 no newline
		print subsub-no-fin-trans in col 97
	set sub-tot-tr-amount += tr-amount
	set sub-no-fin-trans += 1
after dr-tr-territory
		print "-----------------" in col 77
		print "SUBTOTAL FOR" in col 56 no newline
		print dr-tr-territory in col 69 no newline
		print sub-tot-tr-amount in col 77 no newline
		print sub-no-fin-trans in col 97
skip 1
report footer
	print
		"-----------------" in col 77
	print
		total-tr-amount in col 77 no newline
		print no-fin-trans in col 97

*/
